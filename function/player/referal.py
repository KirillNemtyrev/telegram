import json
import os
import logging

from aiogram import types
from dispatcher import dp, bot

from classes import GetDataFromUser, GetDataFromChat

config = open(os.getcwd() + "/config.json", encoding="UTF-8")
data = json.loads(config.read())
config.close()

@dp.message_handler(commands=['referal'])
async def referal_handler(message: types.Message):
    try:
        if message.chat.id != message.from_user.id:
            chat = GetDataFromChat.export_data_from_chat(chat=message.chat.id)
            if chat["working"] is False:
                return

        if not GetDataFromUser.is_user_data(user_id=message.from_user.id):
            return await message.answer(text=data["emojio"] + " *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n–ò–ª–∏ –∂–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞.")

        value = message.get_args()

        if value:
            splited = value.split(" ")
            if len(splited) != 0:

                if splited[0].lower() != "—Å–Ω—è—Ç—å" or len(splited) == 2 and splited[1] and not splited[1].isdigit():
                    return await message.reply(text=data["emojio"] + " –ß—Ç–æ–±—ã —Å–Ω—è—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */referal —Å–Ω—è—Ç—å <–∫–æ–ª-–≤–æ>*\n_–ï—Å–ª–∏ –∫–æ-–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≤—ã—á—Ç–µ—Ç—å—Å—è –≤–µ—Å—å –±–∞–ª–∞–Ω—Å_")
            
                user = GetDataFromUser.get_data_user(user_id=message.from_user.id)
                if user["player_referal_balance"] <= 0:
                    return await message.reply(text=data["emojio"] + " *–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤..*")

                money = user["player_referal_balance"]
                if splited[1] and splited[1].isdigit():
                    money = int(splited[1])
                    if money > user["player_referal_balance"]:
                        return await message.reply(text=data["emojio"] + " *–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤..*")

                if data["minimal_take_referal"] > money:
                    return await message.reply(text=data["emojio"] + f' –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–Ω—è—Ç–∏—è *{data["minimal_take_referal"]:,d} $*..')

                user["player_referal_balance"] -= money
                user["player_balance"] += money

                GetDataFromUser.set_data_user(user_id=message.from_user.id, data=user)
                return await message.reply(text=data["emojio"] + f' –í—ã —Å–Ω—è–ª–∏ —Å–æ —Å—á—ë—Ç–∞ *{money:,d} $*\nüí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: *{user["player_balance"]:,d} $*')

        caption, keyboard = get_message_referal(message.from_user.id)

        await message.reply(text=caption, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logging.error(e, exc_info=True)

def get_message_referal(user):
    data_user = GetDataFromUser.get_data_user(user_id=user)

    caption = data["emojio"] + f' *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\nüí∞ –£—Ä–æ–≤–µ–Ω—å: {data_user["player_referal_lvl"]}/{data["maximum_level_referal"]}*\n\n'
    caption += f'‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n‚ùó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–ª—É–∂–∏—Ç –ø–æ–º–æ—â–∏ –∏–≥—Ä–æ–∫–∞–º\n  –ü—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ –ø–æ —Å—Å—ã–ª–∫–µ\n  –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—Ç–∞–≤–æ–∫ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞\n\n'
    caption += f'‚ùì –ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞?\n‚ùó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ\n  –ü–æ—Å–ª–µ —á–µ–≥–æ –≤–∞—à –¥—Ä—É–≥ –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ\n  –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É *C–¢–ê–†–¢*\n\n'
    caption += f'‚ùì –ë–æ–Ω—É—Å—ã\n‚ùó –ü—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞, –æ–Ω —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å\n  –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n\n'
        #caption += f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/{data["name"]}?start={from_user}'

    buttons = [types.InlineKeyboardButton(text='–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã', callback_data="–†–µ—Ñ–µ—Ä–∞–ª—ã"), types.InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞', callback_data="–°—Å—ã–ª–∫–∞")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return (caption, keyboard)

async def get_user_referals(from_user, chat_id, message_id):

    data_user = GetDataFromUser.get_data_user(user_id=from_user)
    caption = data["emojio"] + " *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n"

    if data_user["player_invited"] is not None:
        user = await bot.get_chat(chat_id=data_user["player_invited"])
        caption += f'–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: [{user.full_name}](tg://user?id={data_user["player_invited"]})\n'
        
    if data_user["player_referals"]:
        caption += "*\n–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:*\n"
        count = len(data_user["player_referals"])
        for temp in data_user["player_referals"]:
            user_id = temp["user"]
            
            invited = await bot.get_chat(chat_id=user_id)
            caption += f'[{invited.full_name}](tg://user?id={user_id})\n'

        caption += f'\n–í—Å–µ–≥–æ *{count}* —á–µ–ª.'

    else:
        caption += "\n–í—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏"

    buttons = [types.InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞', callback_data="–°—Å—ã–ª–∫–∞"), types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data="–ù–∞–∑–∞–¥")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)

    await bot.edit_message_text(chat_id=chat_id, text=caption, message_id=message_id, reply_markup=keyboard)
