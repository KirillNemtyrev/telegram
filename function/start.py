import json
import os
import logging

from aiogram import types
from dispatcher import dp, bot
from function.games import mafia
from function.games import blackjack
from function.games import crocodile
from classes import GetDataFromChat, GetDataFromUser

config = open(os.getcwd() + "/config.json", encoding="UTF-8")
data = json.loads(config.read())
config.close()

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    try:
        if message.from_user.id != message.chat.id:
            if not GetDataFromChat.is_created_chat(message.chat.id):
                GetDataFromChat.created_data_chat(message.chat.id)

            chat = GetDataFromChat.export_data_from_chat(chat=message.chat.id)
            if not chat["working"]:
                caption = data["emojio"] + f" –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, –º–æ—ë –∏–º—è *{data['name_rus']}*\n"
                caption += "–Ø –≤—Ä–æ–¥–µ –∫–∞–∫ —Å—á–∏—Ç–∞—é—Å—å –∏–≥—Ä–æ–≤—ã–π –±–æ—Ç–æ–º\n"
                caption += '–î–ª—è –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è:\n'
                caption += 'üìå _–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞_\n\n'
                caption += '–ü–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å*'

                buttons  = [types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")] 
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                keyboard.add(*buttons)

                return await message.reply(text=caption, reply_markup=keyboard)

        value = message.get_args()
        if message.from_user.id == message.chat.id:

            if value:

                value = int(value)
                if GetDataFromUser.is_user_data(user_id=value):

                    if GetDataFromUser.is_user_data(user_id=message.from_user.id):
                        return await message.reply(text=data["emojio"] + " –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n–¢–∞–∫ –∫–∞–∫ –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã..")

                    user = GetDataFromUser.get_data_user(user_id=value)
                    appened = [{"user": message.from_user.id}]
                    referals = user["player_referals"]
                    if user["player_referals"] is None:
                        referals = appened

                    if user["player_referals"] is not None:
                        referals = list(user["player_referals"])
                        referals.append({"user": message.from_user.id})

                    user["player_referals"] = referals
                    user["player_referal_balance"] += data["bonus_referal"] * user["player_referal_lvl"]
                    GetDataFromUser.set_data_user(user_id=value, data=user)

                    referal_info = await bot.get_chat(chat_id=value)

                    caption = data["emojio"] + f' –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç [{referal_info.full_name}](tg://user?id={value})'
                    if data["bonus_referal"] * user["player_referal_lvl"] > 0:
                        caption += f'\nüí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: *{data["bonus_referal"] * user["player_referal_lvl"]}$ *'

                    await message.answer(text=caption)

                    caption = data["emojio"] + f' [{message.from_user.full_name}](tg://user?id={message.from_user.id}) –ø–µ—Ä–µ—à—ë–ª(-–∞) –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.'
                    if data["bonus_referal"] * user["player_referal_lvl"] > 0:
                        caption += f'\nüí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: *{data["bonus_referal"] * user["player_referal_lvl"]}$ *'

                    await bot.send_message(chat_id=value, text=caption, parse_mode="Markdown")

                    return GetDataFromUser.create_user_data(user_id=message.from_user.id, referal=value, Money=data["bonus_referal"] * user["player_referal_lvl"])
                    
                if not GetDataFromChat.is_created_chat(value):
                    return

                chat = GetDataFromChat.export_data_from_chat(chat=value)

                if chat["action"] == "Mafia":
                    return await mafia.join_mafia_handler(message.from_user.id, value, message.from_user.full_name)

                if chat["action"] == "Black-Jack":
                    return await blackjack.join_blackjack_handler(message.from_user.id, value, message.from_user.full_name)

                if chat["action"] == "Crocodile":
                    return await crocodile.join_crocodile_handler(message.from_user.id, value, message.from_user.full_name)

            if not GetDataFromUser.is_user_data(user_id=message.from_user.id):
                GetDataFromUser.create_user_data(user_id=message.from_user.id)

        buttons  = [types.InlineKeyboardButton(text='–ö–æ–º–∞–Ω–¥—ã üìå', callback_data="–ö–æ–º–∞–Ω–¥—ã")] 
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)

        return await message.answer(data["emojio"] + f" –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç - {data['name_ru']}", reply_markup=keyboard)
            

    except Exception as e:
        logging.error(e, exc_info=True)
