import os
import json
import time

from aiogram import types
from dispatcher import dp, bot

from classes import GetDataFromUser

config = open(os.getcwd() + "/config.json", encoding="UTF-8")
data = json.loads(config.read())
config.close()

async def is_admin_group(chat_id, user_id):
    result = await bot.get_chat_member(chat_id, user_id)
    if result["status"] == "administrator" or result["status"] == "creator":
        return True

    return False

@dp.message_handler(commands=['mute'])
async def mute_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await message.answer("üçç –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!")

        if not message.reply_to_message:
            return await message.reply("üçç –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

        if not await is_admin_group(message.chat.id, message.bot.id):
            return await bot.send_message(message.chat.id, "üçç –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–¥–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        if message.reply_to_message.from_user.id == message.bot.id:
            return await message.reply("üçç –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É...")

        if not await is_admin_group(message.chat.id, message.from_user.id):
            return await bot.delete_message(message.chat.id, message.message_id)

        if await is_admin_group(message.chat.id, message.reply_to_message.from_user.id):
            return await message.reply("üçç [%s](tg://user?id=%d) —è–≤–ª—è–µ—Ç—Å—è *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*" % (message.reply_to_message.from_user.first_name,message.reply_to_message.from_user.id), parse_mode="Markdown")

        await message.answer("üçç [%s](tg://user?id=%d) *–Ω–µ —Å–º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç 30 –º–∏–Ω—É—Ç*" % (message.reply_to_message.from_user.first_name,message.reply_to_message.from_user.id), parse_mode="Markdown")
        await bot.restrict_chat_member(chat_id=message.chat.id, user_id=message.reply_to_message.from_user.id,until_date=int(time.time()) + 60*30, permissions={'can_send_messages': False})
    except Exception as e:
        print(repr(e))

@dp.message_handler(commands=['kick'])
async def kick_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await message.answer("üçç –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!")

        if not message.reply_to_message:
            return await message.reply("üçç –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

        if not await is_admin_group(message.chat.id, message.bot.id):
            return await bot.send_message(message.chat.id, "üçç –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–¥–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        if message.reply_to_message.from_user.id == message.bot.id:
            return await message.reply("üçç –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É...")

        if not await is_admin_group(message.chat.id, message.from_user.id):
            return await bot.delete_message(message.chat.id, message.message_id)

        if await is_admin_group(message.chat.id, message.reply_to_message.from_user.id):
            return await message.reply("üçç [%s](tg://user?id=%d) —è–≤–ª—è–µ—Ç—Å—è *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*" % (message.reply_to_message.from_user.first_name,message.reply_to_message.from_user.id), parse_mode="Markdown")

        await bot.delete_message(message.chat.id, message.message_id)
        await message.answer("üçç [%s](tg://user?id=%d) *–∫–∏–∫–Ω—É–ª(-–∞)* [%s](tg://user?id=%d)" % (message.from_user.first_name,message.from_user.id,message.reply_to_message.from_user.first_name,message.reply_to_message.from_user.id), parse_mode="Markdown")
        await bot.kick_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    
    except Exception as e:
        print(repr(e))

@dp.message_handler(commands=['wrapping'])
async def wrapping_handler(message: types.Message):
    try:
        if message.from_user.id != data["develop"]:
            return 

        user = message.from_user.id
        if message.reply_to_message:
            if message.reply_to_message.from_user.id == message.bot.id:
                return

            user = message.reply_to_message.from_user.id
            
        args = message.get_args()
        if not args or not args.isdigit():
            return

        if not GetDataFromUser.is_user_data(user_id=user):
            return 

        value = int(args)
        if value < 0:
            return 

        data_user = GetDataFromUser.get_data_user(user_id=user)
        data_user["player_balance"] += value
        GetDataFromUser.set_data_user(user_id=user, data=data_user)

        if message.from_user.id != user:
            player = await bot.get_chat(chat_id=user)
            await message.answer(text=data["emojio"] + f' –í—ã —É–≤–µ–ª–∏—á–∏–ª–∏ –±–∞–ª–∞–Ω—Å [{player.full_name}](tg://user?id={user}) –Ω–∞ *{value} $*')
            return await bot.send_message(chat_id=user, text=data["emojio"] + f" [{message.from_user.full_name}](tg://user?id={message.from_user.id}) —É–≤–µ–ª–∏—á–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ *{value} $*")

        return await message.answer(text=data["emojio"] + f' –í–∞—à –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω *{value} $*')

    except Exception as e:
        print(repr(e))